<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 2019.06.28 김재용 -->
<!-- candidate 관련 dao 처리 -->
<mapper namespace="candidateDAO">
		<!-- 6/28 candidate 더미 쿼리       김재용 -->
		<select id="selectCandidate" resultType="CandidateVO">
			SELECT 1 FROM DUAL
		</select>
		
		<!-- 7/1 candidate Insert     장세준  -->
		<insert id="insertCandidate" parameterType="CandidateVO">
		INSERT INTO TAKER (TAKER_ID
						   , TAKER_NAME
						   , TAKER_INFO
						   , TAKER_EDUCATION
						   , TAKER_EMAIL
						   , TAKER_PASSWORD
						   , TAKER_PHONENUM) 
		VALUES (  #{takerId}
				 ,#{takerName}
				 ,#{takerInfo}
				 ,#{takerEducation}
 				 ,#{takerEmail}
				 ,#{takerPassword}
				 ,#{takerPhoneNum} )
		</insert>
		
		<!-- 7/2 	단건 조회 	장세준  -->
		<select id="getCandidate" resultType="CandidateVO">
			SELECT	TAKER_ID
					, TAKER_NAME
					, TAKER_INFO
					, TAKER_EDUCATION
					, TAKER_EDUCATION 
					, TAKER_EMAIL
					, TAKER_PASSWORD
					, TAKER_PHONENUM
			FROM 	TAKER
			WHERE	TAKER_ID = #{takerId} 
			<!-- AND TAKER_PASSWORD= #{takerPassword} -->
		</select>
		
		<!-- 7/9 	시험목록조회 	장세준  -->
		<select id="getExamList" resultType="map">
			SELECT	EXAM.EXAM_ID									"examId"
					,EXAM_NAME										"examName"
					,TO_CHAR(EXAM_START_TIME, 'YYYY-MM-DD HH24:MI')	"examStartTime"
				    ,TO_CHAR(EXAM_END_TIME, 'YYYY-MM-DD HH24:MI')	"examEndTime"
				    ,QUESTION_QUANTITY								"questionQuantity"
				    ,PASSING_SCORE									"passingScore"
				    ,TAKER_ID										"takerId"
				    ,EXAM_DESCRIPTION_SIMPLE						"examDescriptionSimple"
				    ,EXAM_DESCRIPTION_DETAIL						"examDescriptionDetail"
			FROM    EXAM, TAKE_EXAM
			WHERE   EXAM.EXAM_ID = TAKE_EXAM.EXAM_ID
			AND		TAKER_ID = #{takerId}
			<!-- AND TAKER_PASSWORD= #{takerPassword} -->
		</select>
		
		<!-- 7/12 	시험목록조회 	장세준  -->
		<select id="candidateScheduleCheck" resultType="map">
			SELECT	            EXAM_ID											
								,EXAM_NAME										
								,TO_CHAR(EXAM_START_TIME, 'YYYY-MM-DD HH24:MI')	EXAM_START_TIME
							    ,TO_CHAR(EXAM_END_TIME, 'YYYY-MM-DD HH24:MI')	EXAM_END_TIME
							    ,QUESTION_QUANTITY								
							    ,PASSING_SCORE									
							    ,EXAM_DESCRIPTION_SIMPLE						
							    ,EXAM_DESCRIPTION_DETAIL						
			FROM    			EXAM
		</select>
		
		
		
		<!-- 7/15 	시험목록조회 	장세준  -->
		<select id="candidateScheduleCheckPage" resultType="map">
			SELECT B.* FROM( SELECT A.*, ROWNUM RN FROM (
				SELECT	            EXAM_ID										
									,EXAM_NAME										
									,TO_CHAR(EXAM_START_TIME, 'YYYY-MM-DD HH24:MI')	EXAM_START_TIME
								    ,TO_CHAR(EXAM_END_TIME, 'YYYY-MM-DD HH24:MI')	EXAM_END_TIME
								    ,QUESTION_QUANTITY								
								    ,PASSING_SCORE									
								    ,EXAM_DESCRIPTION_SIMPLE						
								    ,EXAM_DESCRIPTION_DETAIL						
				FROM    			EXAM
				WHERE				EXAM_START_TIME > SYSDATE
				ORDER BY			EXAM_ID DESC ) A ) B
				<where>
					RN BETWEEN #{start} AND #{end}
				</where>
		</select>
		
		
		
		
		
		<!-- 7/9 	로그인 	장세준  -->
		<select id="candidateLogin" resultType="CandidateVO">
			SELECT	TAKER_ID
					, TAKER_NAME
					, TAKER_INFO
					, TAKER_EDUCATION
					, TAKER_EMAIL
					, TAKER_PASSWORD
			FROM 	TAKER
			WHERE	TAKER_ID = #{takerId} 
			<!-- AND TAKER_PASSWORD= #{takerPassword} -->
		</select>
		
		<select id="getTakerPassword" resultType="String">
			SELECT	TAKER_PASSWORD
			FROM 	TAKER
			WHERE	TAKER_ID = #{takerId} 
		</select>
		
		<!-- 7/2 	응시자 전체 리스트 조회 	장세준  -->
		<select id="getCandidateList" resultType="CandidateVO">
			SELECT	TAKER_ID
					, TAKER_NAME
					, TAKER_INFO
					, TAKER_EDUCATION
					, TAKER_EMAIL
					, TAKER_PASSWORD
			FROM 	TAKER
		</select>
		
		<!-- 7/2 	candidate Update 	장세준  -->
		<update id="updateCandidate">
			UPDATE TAKER
		<set>
			<if test="takerPassword != null and takerPassword != '' ">
				TAKER_PASSWORD = #{takerPassword},
			</if>
			<if test="takerName != null and takerName != '' ">
				TAKER_NAME = #{takerName},
			</if>
			<if test="takerInfo != null and takerInfo != '' ">
				TAKER_INFO = #{takerInfo},
			</if>
			<if test="takerEducation != null and takerEducation != '' "> 
				TAKER_EDUCATION = #{takerEducation},
			</if>
			<if test="takerEmail != null and takerEmail != '' "> 
				TAKER_EMAIL = #{takerEmail},
			</if>
			<if test="takerPhoneNum != null and takerPhoneNum != '' "> 
				TAKER_PHONENUM = #{takerPhoneNum},
			</if>
		</set>
		WHERE TAKER_ID = #{takerId}	
	</update>
		
		<!-- 7/2 	candidate delete 	장세준  -->
		<!-- <delete id="deleteCandidate" parameterType="CandidateVO">
			DELETE	FROM TAKER
			WHERE TAKER_ID = #{takerId}
		</delete>
		 -->
		 
		<!-- 단건, 다건 삭제 // 이승환추가 -->
	<delete id="deleteCandidate" parameterType="CandidateVO">
		DELETE FROM TAKER
		<where>
			<choose>
				<when test="takerList != null and takerList">
					TAKER_ID in
					<foreach collection="takerList"
							 open="(" close=")" separator=","
							 item="item">
							 #{item}
					</foreach>
				</when>
				<otherwise>
					TAKER_ID = #{takerId}
				</otherwise>
			</choose>
		</where>
	</delete>
		
	<select id="getCount" resultType="int">
		SELECT COUNT(*) FROM TAKER
	</select>
	
	<select id="examCount" resultType="int">
		SELECT COUNT(EXAM_ID) FROM EXAM
	</select>
	
	<select id="idcheck" parameterType="CandidateVO" resultType="Integer">
		SELECT	COUNT(*) FROM TAKER
     		WHERE   TAKER_ID = #{takerId}
	</select>
		
</mapper>